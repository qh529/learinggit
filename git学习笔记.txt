2016-2-27 学习小结

现在安装git windows的工具，地址：https://git-for-windows.github.io/
 

初始化一个Git仓库，使用git init命令。可以直接进入该目录，然后右键选择 Git Bash Here，会出现bash窗口，然后敲git init命令，
即将该目录去设置为仓库。

添加文件到Git仓库，分两步：

第一步，使用命令git add <file>，注意，可一次或反复多次使用，添加多个文件，多个文件之间空格；

第二步，使用命令git commit，完成提交。

查看仓库文件的目前的情况，使用 git status命令，可以看到仓库哪些文件修改了，提交了等等。如果某个文件被修改了，
使用git diff <file> 命令查看该文件修改的情况。

知道了对test.txt作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是git add：

查看提交记录可以使用git log查看，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数

git 使用HEAD代表当前版本，HEAD^代表前一个版本，HEAD^^代表前前一个版本，也可以使用HEAD~2表示前前一个版本。

使用git reset --hard HEAD^可以回退到前一个版本，或者回退到具体的某一个版本，使用:git reset --hard <versionID>

可以使用git reflog查看历次操作，从结果中可以看到历次的版本号

———————————————————————————————————————华丽的分隔线S———————————————————————————————————————————————————————

理解工作区 和 暂存区 和 版本库之间的差别

使用git add 命令是将工作区的修改提交到暂存区
使用git commit 命令是将暂存区的修改提交到版本库

可以使用git diff HEAD -- test.txt 比较 版本库和工作区之前的差别

git checkout -- <file> 是撤销工作区的修改，恢复到最后一次git commit或者git add时的状态

如果忘记输入git checkout 后面的-- ,就是切换分支的命令。

--------------------------------------------撤销修改---------------------------------------
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

--------------------------------------------删除------------------------------------------------
git rm <file>
git commit
撤销删除也是使用 git checkout -- <file>

----------------------------------------------与github建立关联------------------------------------------------

需要生成ssh公钥和私钥，使用如下命令：
ssh-keygen -t rsa -C "qh529@163.com"

然后到github个人主页的setting里设置ssh key，之后就可以创建repository，与本地仓库关联，使用如下命令：

git remote add origin git@github.com:michaelliao/learngit.git

提交到远程仓库使用如下命令：
git push -u origin master
第一次提交时，为了与远程仓库的master分支建立关联，需要使用-u参数。以后直接使用git push orgin master

------------------------------------从远程仓库克隆------------------------------------------
使用git clone git@github.com:qh529/secondrepo.git

遇到了access deny错误，是因为ssh 私钥未添加到ssh agent处，处理如下：
执行如下命令：
 ssh-agent bash
 ssh-add /d/Git/ssh/id_rsa
 
 即可
 ———————————————————————————————————分支—————————————————————————————————————————————————————————————
 创建并切换分支命令：
 git checkout -b dev
 该命令相当于下面的两条命令：
 git branch dev
 git checkout dev
 
 查看所有分支使用git branch命令
 
 切换分支命令 :git checkout dev,切换到dev分支
 
 将dev分支合并到master分支 git merge dev
 
 合并后就可以删除dev分支，命令：git branch -d dev
 
 使用git log --graph 查看分支合并图
 
 ------------------------------分支合并注意------------------------------
 使用fast forward模式进行合并，会没有合并记录，所以不要使用这一方式合并
 使用如下面参数合并就强制不适用fast-forward模式，命令：
 git merge --no-ff -m "merge with no-ff" dev
 
 -------------------------------暂存分支的改动退出工作区------------------------------------------
工作区只能为一个分支所操作，所以如果当前分支的改动还未保存就要去其他分支修改内容，需要将当前分支的改动退出工作区并暂存起来，使用命令：
git stash

回复现场使用命令：
git stash pop
该命令恢复现场并删除stash区的内容删除

------------------------------强行删除分支-----------------------------------------
git branch -D dev

----------------------------------查看远端仓库----------------------------------
命令：
$ git remote -v
会得到如下结果：
origin  git@github.com:michaelliao/learngit.git (fetch)
origin  git@github.com:michaelliao/learngit.git (push)
上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。

想远端仓库推送哪个分支，就使用如下命令：

git push origin <分支名>

------------------------------------多人协作的操作方式------------------------------------------
因此，多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。